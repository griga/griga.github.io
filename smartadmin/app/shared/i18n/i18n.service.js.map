{"version":3,"file":"i18n.service.js","sourceRoot":"","sources":["i18n.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAyC,eAAe,CAAC,CAAA;AACzD,mBAAkC,SAAS,CAAC,CAAA;AAC5C,qBAA6B,eAAe,CAAC,CAAA;AAC7C,uBAAqB,cACrB,CAAC,CADkC;AACnC,gCAAwB,mBAExB,CAAC,CAF0C;AAG3C;IAOE,qBAAoB,IAAS,EAAU,GAAkB;QAArC,SAAI,GAAJ,IAAI,CAAK;QAAU,QAAG,GAAH,GAAG,CAAe;QACvD,IAAI,CAAC,KAAK,GAAG,IAAI,YAAO,EAAE,CAAC;QAE3B,IAAI,CAAC,YAAY,CAAC,eAAM,CAAC,aAAa,IAAI,IAAI,CAAC,CAAC;QAChD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAA;IACtC,CAAC;IAEO,iCAAW,GAAnB,UAAoB,GAAY;QAC9B,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QACtB,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC;IACpB,CAAC;IAEO,2BAAK,GAAb,UAAc,MAAW;QAAzB,iBAQC;QAPC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,eAAa,MAAM,UAAO,CAAC;aACtC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;aACrB,SAAS,CAAC,UAAC,IAAQ;YAClB,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YACjB,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACtB,KAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAA;QACjB,CAAC,CAAC,CAAA;IACN,CAAC;IAEO,kCAAY,GAApB,UAAqB,MAAa;QAChC,IAAI,QAAQ,GAAG,2BAAS,CAAC,IAAI,CAAC,UAAC,EAAE;YAC/B,MAAM,CAAC,EAAE,CAAC,GAAG,IAAI,MAAM,CAAA;QACzB,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACb,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAA;QACjC,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,IAAI,KAAK,CAAC,4CAA0C,MAAQ,CAAC,CAAC;QAEtE,CAAC;IACH,CAAC;IAED,iCAAW,GAAX,UAAY,QAAQ;QAClB,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAC;QAChC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAA;IAC1B,CAAC;IAGD,+BAAS,GAAT,UAAU,GAAO,EAAE,GAAO;QACxB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,CAAC,CAAA;IACvC,CAAC;IAEM,oCAAc,GAArB,UAAsB,MAAa;QACjC,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,MAAM,CAAA;IACpE,CAAC;IAtDH;QAAC,iBAAU,EAAE;;mBAAA;IAwDb,kBAAC;AAAD,CAAC,AAvDD,IAuDC;AAvDY,mBAAW,cAuDvB,CAAA","sourcesContent":["import {Injectable, ApplicationRef} from '@angular/core';\nimport {Observable, Subject} from \"rxjs/Rx\";\nimport {Http, Response} from \"@angular/http\";\nimport {config} from '../../config'\nimport {languages} from './languages.model'\n\n@Injectable()\nexport class I18nService {\n\n  public state:Subject<any>;\n  public data:{};\n  public currentLanguage:any;\n\n\n  constructor(private http:Http, private ref:ApplicationRef) {\n    this.state = new Subject();\n\n    this.initLanguage(config.defaultLocale || 'us');\n    this.fetch(this.currentLanguage.key)\n  }\n\n  private extractData(res:Response) {\n    let body = res.json();\n    return body || {};\n  }\n\n  private fetch(locale: any) {\n    this.http.get(`api/langs/${locale}.json`)\n      .map(this.extractData)\n      .subscribe((data:any)=> {\n        this.data = data;\n        this.state.next(data);\n        this.ref.tick()\n      })\n  }\n\n  private initLanguage(locale:string) {\n    let language = languages.find((it)=> {\n      return it.key == locale\n    });\n    if (language) {\n      this.currentLanguage = language\n    } else {\n      throw new Error(`Incorrect locale used for I18nService: ${locale}`);\n\n    }\n  }\n\n  setLanguage(language){\n    this.currentLanguage = language;\n    this.fetch(language.key)\n  }\n\n\n  subscribe(sub:any, err:any) {\n    return this.state.subscribe(sub, err)\n  }\n\n  public getTranslation(phrase:string):string {\n    return this.data && this.data[phrase] ? this.data[phrase] : phrase\n  }\n\n}\n"]}